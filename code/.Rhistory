apply(iris[ , 1:4], 2, sd)
apply(iris, 2, sd)
## syntax - lapply, sapply
lapply(list.object, fun)
## examples:
x1 <- 3:10
x2 <- c(TRUE, TRUE, FALSE, FALSE, TRUE)
y <- list(numbers = x1, wrong = x2)
lapply(y, length)
sapply(y, length)
lengths(y) ## the same as sapply(*, length)
str(sapply(y, length))
lapply(iris, is.numeric)
sapply(iris, is.numeric)
sl <- list(A = matrix(rnorm(25, 10, 1), ncol = 5),
B = matrix(runif(20), ncol = 5))
sl <- list(A = matrix(rnorm(25, 10, 1), ncol = 5),
B = matrix(runif(20), ncol = 5))
sl
my_mean <- function(x){a <- x[ , 2]; mean(a)} ## ; is ...
sapply(sl, my_mean)
c(mean(sl[[1]][ , 2]), mean(sl[[2]][ , 2]))
# Apply-Family:
# apply, lapply, sapply, tapply, vapply, rapply, mapply, ...
apropos("apply")
str(iris)
apply(iris[ , 1:4], 2, mean)
apply(iris[ , 1:4], 2, sd)
apply(iris, 2, sd)
## syntax - lapply, sapply
lapply(list.object, fun)
sapply(list.object, fun)
## examples:
x1 <- 3:10
x2 <- c(TRUE, TRUE, FALSE, FALSE, TRUE)
y <- list(numbers = x1, wrong = x2)
lapply(y, length)
sapply(y, length)
lengths(y) ## the same as sapply(*, length)
str(sapply(y, length))
lapply(iris, is.numeric)
sapply(iris, is.numeric)
sl <- list(A = matrix(rnorm(25, 10, 1), ncol = 5),
B = matrix(runif(20), ncol = 5))
sl
my_mean <- function(x){a <- x[ , 2]; mean(a)} ## ; is ...
sapply(sl, my_mean)
c(mean(sl[[1]][ , 2]), mean(sl[[2]][ , 2]))
# Can use "anonymous" functions directly inside apply
sapply(sl, function(x){ a <- x[ , 2]; mean(a)})
# syntax - tapply
tapply(vecA, vecB-category, fun, optional.args)
## examples
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
# syntax - tapply
tapply(vecA, vecB-category, fun, optional.args)
## examples
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
## this is  1) split()  then 2) sapply():
sapply(split(iris$Sepal.Length, iris$Species), mean)
mean(iris$Sepal.Length[iris$Species == "setosa"])
mean_x <- function(j){tapply(iris[ , j], iris$Species, mean)}
mean_x("Sepal.Length")
mean_x(1)
mean_x(2)
mean_x(3)
mean_x(4)
lapply(1:4, mean_x)
sapply(1:4, mean_x)
tapply(iris[ , "Sepal.Width"], iris$Species, mean)
tapply(iris[ , "Sepal.Width"], iris$Species, mean)
tapply(iris[ , "Sepal.Width"], iris$Species, mean)
aggregate(iris[ , 1:4],
by = list(Species = iris$Species),
FUN = mean)
aggregate(iris[ , 1:4],
by = list(Species = iris$Species),
FUN = mean)
tapply(iris[ , "Sepal.Width"], iris$Species, mean)
aggregate(iris[ , 1:4],
by = list(Species = iris$Species),
FUN = mean)
iris[ , 1:4]
aggregate(iris[ , 1:4],
by = list(Species = iris$Species),
FUN = mean)
str(sleep)
aggregate(x = list(median.extra = sleep[ , "extra"]),
by = list(Group = sleep[ , "group"]),
FUN = median)
by(iris[ , 1:4], iris[ , "Species"], summary)
tapply(iris[,"Sepal.Width"], c(rep(1, 100), rep(2, 50)), mean)
c(rep(1, 100), rep(2, 50))
?tapply
##---------------------------------------------------------------
## strsplit() and unlist()
test <- c("Some-text" , "another-string",
"Amsterdam is a nice city")
t1 <- strsplit(test, split = "-")
t1
sapply(t1, function(x) x[1])
## equivalent, less typing, more efficient ...
## but definitely less easy to understand :
sapply(t1, "[", 1)
?sapply
t1[[1]]
unlist(t1)
## examples:
x1 <- 3:10
x2 <- c(TRUE, TRUE, FALSE, FALSE, TRUE)
y <- list(numbers = x1, wrong = x2)
lapply(y, length)
sapply(y, length)
lengths(y) ## the same as sapply(*, length)
str(sapply(y, length))
lapply(iris, is.numeric)
sapply(iris, is.numeric)
sl <- list(A = matrix(rnorm(25, 10, 1), ncol = 5),
B = matrix(runif(20), ncol = 5))
my_mean <- function(x){a <- x[ , 2]; mean(a)} ## ; is ...
c(mean(sl[[1]][ , 2]), mean(sl[[2]][ , 2]))
sapply(sl, my_mean)
c(mean(sl[[1]][ , 2]), mean(sl[[2]][ , 2]))
# Can use "anonymous" functions directly inside apply
sapply(sl, function(x){ a <- x[ , 2]; mean(a)})
# syntax - tapply
tapply(vecA, vecB-category, fun, optional.args)
aggregate(x = list(median.extra = sleep[ , "extra"]),
by = list(Group = sleep[ , "group"]),
FUN = median)
by(iris[ , 1:4], iris[ , "Species"], summary)
tapply(iris[,"Sepal.Width"], c(rep(1, 100), rep(2, 50)), mean)
##---------------------------------------------------------------
## strsplit() and unlist()
test <- c("Some-text" , "another-string",
"Amsterdam is a nice city")
t1 <- strsplit(test, split = "-")
t1
sapply(t1, function(x) x[1])
## equivalent, less typing, more efficient ...
## but definitely less easy to understand :
sapply(t1, "[", 1)
mN<-matrix(rnorm(1000*20,mean = 5,sd=2), nrow = 20)
X<-1:20
t.test(X)
str(rr <- t.test( 1:20, mu = 5) )
f.confi <- function(x, mu, ...) t.test(x, mu=mu, ...)[["conf.int"]]
f.conf1 <- function(x, mu=5, ...) t.test(x, mu=mu, ...)$conf.int
t.confi<-apply(mN,2,f.confi,mu=5)
t.conf<-apply(mN,2,f.conf1)
identical(t.confi,t.conf)
class(t.confi)
#c)
mu <- 5
t.conf[1,]
t.cpmf
t.conf
str(t.conf)
conf.i <- function(n.samp, conf.level, mu.true = 5, mu.test = mu.true, n = 20) {
x <- matrix(rnorm(n.samp * n, m=mu.true, s=2), nrow = n)
t.ci <- apply(x, 2, f.confi, mu = mu.test, conf.level=conf.level)
mean(t.ci[1,] <= mu.test & mu.test <= t.ci[2,]) # or sum(....) / n.samp
}
conf.i(1000, 0.95)
conf.i(1000, 0.95)
conf.i(1000, 0.95)
## Prepare plot range and label axes:
plot(range(t.conf),c(1,50), type="n",
xlab="confidence interval", ylab="sample number")
## 50 lines parallel to x-axis and one vertical at true mu=5:
i <- 1:50; segments(t.conf[1,i], i,t.conf[2,i], i)
?segments
## 50 lines parallel to x-axis and one vertical at true mu=5:
i <- 1:50; segments(t.conf[1,i], i,t.conf[2,i], i)
?abline
abline(v = 5, col=2, lty=2); axis(1, at=5, quote(mu), padj=-1, col=2,col.axis=2)
?lty
?abline
abline(v = 5, col=2, lty=2);
axis(1, at=5, quote(mu), padj=-1, col=2,col.axis=2)
#5
require("mlbench")
install.packages("mlbench")
data(BostonHousing)
require("mlbench")
data(BostonHousing)
help("BostonHousing")
#medv is the target variable
mod<-lm(medv~.,data=BostonHousing)
str(mod)
summary(mod)
str(summary(mod), give.attr=FALSE)
coef(summary(.))
coef(summary(mod))
str(summary(mod), give.attr=FALSE)
coef(summary(mod))
coef(summary(mod))[,c("Estimate","Pr)"]
coef(summary(mod))[,c("Estimate","Pr")]
mod$coefficients["Estimate"]
mod$coefficients[,"Estimate"]
mod$coefficients[,c(1,4)]
head( coef(summary(mod))[, c(1,4)], 3)
coef(summary(mod))[,c(1,4)]
coef(summary(mod))[,c("Estimate", "Pr(>|t|)")]
head( coef(summary(mod))[, c(1,4)], 3)
n <- NROW(BostonHousing)
(n <- NROW(BostonHousing))
R <- lapply(1:N.boot, function(i) {
d. <- BostonHousing[sample(n, replace=TRUE), ]
coef(summary(lm(medv ~ ., data = d.)))[, c(1,4)]
})
str(R[1:3])
R <- lapply(1:N.boot, function(i) {
d. <- BostonHousing[sample(n, replace=TRUE), ]
coef(summary(lm(medv ~ ., data = d.)))[, c(1,4)]
})
N.boot<-1000
R <- lapply(1:N.boot, function(i) {
d. <- BostonHousing[sample(n, replace=TRUE), ]
coef(summary(lm(medv ~ ., data = d.)))[, c(1,4)]
})
str(R[1:3])
boot.crim <- sapply(R, function(cf) cf["crim", 1])
hist(boot.crim, breaks="Scott")
abline(v = coef(mod)["crim"], col=2, lwd=2, lty=2)
dim(c.it <- sapply(R, function(cf) cf[c("indus","tax"), 1]))
plot(t(c.it), main = "Boostrap distribution of regression coefficients")
hist(boot.crim, breaks="Scott")
abline(v = coef(mod)["crim"], col=2, lwd=2, lty=2)
dim(c.it <- sapply(R, function(cf) cf[c("indus","tax"), 1]))
plot(t(c.it), main = "Boostrap distribution of regression coefficients")
points(rbind(coef(mod)[c("indus","tax")]), pch=20, cex=2, col=2)
dim(c.it <- sapply(R, function(cf) cf[c("indus","tax"), 1]))
?t
plot(t(c.it), main = "Boostrap distribution of regression coefficients")
?rbind
points(rbind(coef(mod)[c("indus","tax")]), pch=20, cex=2, col=2)
smoothScatter(t(c.it), main = "Boostrap distribution of regression coefficients")
points(rbind(coef(mod)[c("indus","tax")]), pch=20, cex=2, col=2)
?smoothScatter
rm( list = ls() )
d.sport <- read.table(
"http://stat.ethz.ch/Teaching/Datasets/WBL/sport.dat",
header=TRUE)
hi.k <- hist(d.sport[,"kugel"], plot=FALSE)
class( hi.k )
str( hi.k )
hi.k[2:3]
hi.k[c("counts", "density")]
hi.k["counts"] # the same as hi.k[2]
hi.k[[2]]
hi.k[["counts"]]  # the same as
hi.k[[c("counts", "density")]]   ## Error
str( d.sport )
class( d.sport )
is.list( d.sport )
d.sport[2:3]
d.sport[c("kugel", "hoch")]
d.sport["kugel"]
d.sport[, 2:3]
d.sport[, c("kugel", "hoch")]
d.sport[, "kugel", drop = FALSE]
d.sport[["kugel"]]
d.sport[, "kugel"]
d.sport$kugel
d.sport$kug # (works ..)
d.sport[, "kug"]  # E !
d.sport[["kug"]]  #  ?
d.sport["kug"]    # E !
x <- as.data.frame(matrix( rnorm(1000000 ), nrow = 100 ))
f.sum1 <- function(x){
res <- numeric(NCOL(x)) # initialize result vector
for( i in 1:NCOL(x) ){
res[i] <- sum( x[, i] )
}
res
}
system.time( r1 <- f.sum1(x) )
f.sum2 <- function(x) apply( X=x, MARGIN=2, sum )
system.time( r2 <- f.sum2(x) )
f.sum3 <- function(x) sapply(x, sum )
system.time( r3 <- f.sum3(x) )
f.sum4 <- function(x) colSums(x)
system.time( r4 <- f.sum4(x) )
head(cbind(r1,r2, r3, r4)) ## they give the same
## Quiz :
pi  # <-- what happens?  ((--> what method is called when this is executed ?))
plot( iris[, "Sepal.Length"], iris[, "Sepal.Width"] )
class( iris[, "Sepal.Length"] )
plot( Sepal.Width ~ Sepal.Length, data = iris )
dev.off()
plot( Sepal.Width ~ Sepal.Length, data = iris )
class( Sepal.Width ~ Sepal.Length )
plot( iris )
class( iris )
plot( iris[, "Species"] )
plot(iris$Species)
plot(iris$Species)
class( iris[, "Species"] )
plot( lynx )
class( lynx )
?(esoph)
table(esoph[, "alcgp"])
plot( table(esoph[, "alcgp"]) )
class( table(esoph[, "alcgp"])  )
table(esoph[, "alcgp"], esoph[, "tobgp"])
plot( table(esoph[, "alcgp"], esoph[, "tobgp"]) )
methods( plot )
?plot.default
?plot.ts
?plot.factor
# print "source" i.e., definition of specific methods
plot.default
methods( plot )
?plot.default
methods( plot )
?plot.default
?plot.ts
?plot.factor
# print "source" i.e., definition of specific methods
plot.default
# and let's look at the method for 'factor's (which does bar plots):
plot.factor # hmm ??   we where told, there is such a method ..
methods( plot )
getAnywhere(plot.factor)
getS3method("plot", "factor")
getAnywhere(plot.factor)
getS3method("plot", "factor")
methods(class="factor")
methods(class="factor")
iris
plot(iris$Sepal.Length)   # plot.default
plot(iris)                # plot.data.frame
methods(plot)
methods(plot)[30]
?methods(plot)[30]
?plot.TukeyHSD
plot.TukeyHSD
methods(plot)
class( cars )
str( cars )
class( cars[, "dist"] )
n1 <- length(methods(print))
print.random <- function(x){
print("Random Numbers:")
print(rnorm(x))
}
n2 <- length(methods(print))
n1
n2
x <- 10
class(x) <- "random"
print(x)
class(x) <- "numeric"
print(x)
methods(class = "random")
x <- 10
class(x) <- "random"
print(x)
class(x) <- "numeric"
print(x)
methods(class = "random")
# Second Example
plot.random <- function(x, ...){
hist(rnorm(x), ...)
}
methods(class = "random")
x <- 100
class(x) <- "random"
plot(x)
plot(x, col = "red") # works too
class(x) <- "numeric"
plot(x)
x <- c(5,7,5,43,7,7,4,6)
#class(x) <- "random"
print.random(x)
search()  ## (Note: Rstudio has own entry)
ls(3)
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)
require("rpart")
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)
## needs
library(rpart)
plot(fit)
text(fit, use.n = TRUE)
class(fit)
if(FALSE) ## typically do *NOT* install recommended packages -- they come with R !
install.packages(rpart)
library(rpart)
ls(2)               # quicker
ls("package:rpart") # more portable & "robust"
help( package = rpart )
?rpart
## Install the (CRAN) package if it is not yet installed :  require()  returns TRUE/FALSE
if(!require("robustbase"))
install.packages( "robustbase")
## I can install a package (from source, on Linux), using a local "zip-like" file:
install.packages("/u/maechler/R/Pkgs/robustbase_0.93-0.tar.gz",
repos=NULL) # <- do not try to get it from CRAN server
## now load & attach it
require("robustbase")
## I can install a package (from source, on Linux), using a local "zip-like" file:
install.packages("/u/maechler/R/Pkgs/robustbase_0.93-0.tar.gz",
repos=NULL) # <- do not try to get it from CRAN server
## now load & attach it
require("robustbase")
## One data set :
example(starsCYG) ## runs everything
## in steps:
help(starsCYG)
## Install the (CRAN) package if it is not yet installed :  require()  returns TRUE/FALSE
if(!require("georob"))
install.packages( "georob")
library(georob)
data(meuse)
str(meuse)
plot(y~x, data=meuse, cex = sqrt(zinc)/10, asp=1)
r.logzn <- georob(log(zinc) ~ sqrt(dist),
data = meuse, locations = ~ x + y,
variogram.model = "RMexp",
param = c(variance = 0.15, nugget = 0.05, scale = 200),
tuning.psi = 1000)
r.logzn <- georob(log(zinc) ~ sqrt(dist),
data = meuse, locations = ~ x + y,
variogram.model = "RMexp",
param = c(variance = 0.15, nugget = 0.05, scale = 200),
tuning.psi = 1000)
class(r.logzn)
#Exercise 11
load(url("http://stat.ethz.ch/Teaching/R/Obj/boot-R.rda"))
class(R) <- "myBoot"
attribute(R)
attribute(R)
attributes(R)
#Exercise 11
load(url("http://stat.ethz.ch/Teaching/R/Obj/boot-R.rda"))
attributes(R)
class(R) <- "myBoot"
attributes(R)
R
a <- array(unlist(x), dim = c(dim(x[[1]]), length(x)),
dimnames = c(dimnames(x[[1]]), list(NULL))) ## give the *mean* values of all of them
print.myBoot <- function(x, ...) {
cat("A 'myBoot' object of ", length(x), " bootstrap replications\n")
cat("The first one is:\n")
print(x[[1]], ...)
a <- array(unlist(x), dim = c(dim(x[[1]]), length(x)),
dimnames = c(dimnames(x[[1]]), list(NULL))) ## give the *mean* values of all of them
cat("\nThe mean over all replicates is:\n")
print(apply(a, 1:2, mean), ...)
invisible(x)
}
R
?invisible
print(R,digits=3)
?nrow
R[[1]]
?mfrow
#d
plot.myBoot <- function(x, y, ...) {
## remember: x is a list of matrices, all alike
ncoef <- NROW(x[[1]])
nms <- rownames(x[[1]])
op <- par(mfrow=c(ceiling((length(nms)-1)/3), 3),
mar = 0.1 + c(3, 3, 2, 1), mgp = c(1.4, 0.6, 0))# <- save on space
for(j in nms[-1]) # : -1: not the "(Intercept)"
hist(sapply(x, function(m) m[j, "Estimate"]), xlab = "", main = j)
par(op)
}
## remember: x is a list of matrices, all alike
ncoef <- NROW(x[[1]])
nms <- rownames(x[[1]])
op <- par(mfrow=c(ceiling((length(nms)-1)/3), 3),
mar = 0.1 + c(3, 3, 2, 1), mgp = c(1.4, 0.6, 0))# <- save on space
op <- par(mfrow=c(ceiling((length(nms)-1)/3), 3),mar = 0.1 + c(3, 3, 2, 1), mgp = c(1.4, 0.6, 0))# <- save on space
?mfrow
??mfrow
?SVD
?svd
d1 <- diag(5, nrow=4); d2 <- diag(c(3, 1, -2, 0))
(d1 <- diag(5, nrow=4); d2 <- diag(c(3, 1, -2, 0)))
(d1 <- diag(5, nrow=4)); (d2 <- diag(c(3, 1, -2, 0)))
?diag
library(ggplot2)
gglot(x=total_bill, y=tip, data=tips,
+ facets=smoker˜sex)
gglot(x=total_bill, y=tip, data=tips,
facets=smoker˜sex)
gglot(x=total_bill, y=tip, data=tips,
facets=smoker~sex)
gplot(x=total_bill, y=tip, data=tips,
facets=smoker~sex)
qplot(x=total_bill, y=tip, data=tips,
facets=smoker~sex)
?arima
arima
?arima
?auto.arima
??auto.arima
440*0.8
getwd()
#install.packages('colorRamps')
getwd()
setwd("/Users/shirzart/Desktop/master_project_work_git/master_project_work_showcase/Code/")
require(maptools)
source('worm3_coordinate_cell_conversion_2018-04-11.R')
library('RColorBrewer')
library('jpeg')
library('raster')
library('colorRamps')
